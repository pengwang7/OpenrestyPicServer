user root root;
worker_processes auto;
worker_priority 0;

daemon off;

pid       logs/picserver_nginx.pid;
error_log logs/picserver_error.log;

events {
	worker_connections 65535;
	multi_accept on;
	use epoll;
}

http {	
	init_by_lua	'
--	    dofile("lua/init_lua_path.lua");
		ngx.shared.shared_data:set("ServerType","PIC");
		ngx.shared.shared_data:set("ServerPort",8081);
	';

	lua_shared_dict statics_dict 1M;
    lua_shared_dict shared_data 128M;
    lua_shared_dict my_locks 10M;

	lua_code_cache       off;
	client_max_body_size 2M;
    include              mime.types;
    default_type         application/octet-stream;
	access_log 	         off;
	sendfile       		 on;
	tcp_nopush			 on;
	keepalive_timeout 	 60;

	#:/upload/$(authcode)/$(uuid)/$(filename).jpg
	#:/download/$(authcode)/$(uuid)/$(filename).jpg

	server {
		listen 8081;

		location /upload {
			default_type text/html;
			set $image_root "/cache_pic/pms";
			content_by_lua_file lua/image_upload.lua;
		}
		
		location /download {
			alias /cache_pic/pms;
			set $image_root "/cache_pic/pms";
	
			if ($uri ~ "/download/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/(.*)") {
				set $image_authcode "$1";
				set $image_uuid     "$2";
				set $image_name     "$2_$3";
				set $image_all_name "$image_root/$image_name";
			}

			if (!-f $image_all_name) {
                content_by_lua_file lua/image_download.lua;
            }

            if (-f $image_all_name) {
				rewrite ^/download/(.+)$ /download_internal/$image_name last;
            }
		}

		location /download_internal {
			internal;
        	alias /cache_pic/pms;
		}

		location /version {
			content_by_lua_file lua/test.lua;
		}
	}
}
